// Generated by CoffeeScript 1.9.1
(function() {
  var Parser, puer, pwd, sysPath;

  sysPath = require("path");

  puer = require("./index");

  Parser = require("./helper").Parser;

  pwd = process.cwd();

  exports.run = (function(_this) {
    return function(args) {
      var option, parser;
      option = {};
      parser = new Parser();
      parser.on("-p --port <port>", "server's listen port, 8000 default", function(port) {
        if (port) {
          return option.port = parseInt(port);
        }
      });
      parser.on("-f --filetype <typelist>", "fileType to watch(split with '|'), default 'js|css|html|xhtml'", function(typelist) {
        return option.filetype = typelist;
      });
      parser.on("-d --dir <dir>", "your customer working dir. default current dir ", function(dir) {
        if (dir) {
          return option.dir = sysPath.resolve(pwd, dir);
        }
      });
      parser.on("-i --inspect", "start weinre server and debug all puer page", function(dir) {
        return option.inspect = true;
      });
      parser.on("-x --exclude", "exclude file under watching(must be a regexp), default: ''", function(dir) {
        var ignored;
        ignored = dir.replace(/^\/|\/$/g, "");
        return option.ignored = new RegExp(ignored);
      });
      parser.on("-a --addon <file>", "your addon's path", function(file) {
        return option.addon = sysPath.resolve(pwd, file);
      });
      parser.on("-t --target <target>", "proxy url", function(target) {
        return option.proxy = target;
      });
      parser.on("--no-reload", "close  auto-reload feature,(not recommended)", function() {
        return option.reload = false;
      });
      parser.on("--no-launch", "close the auto launch feature", function() {
        return option.launch = false;
      });
      parser.on("-h --help", "help list", function(haha) {
        var man;
        option.help = true;
        man = "\n\nUsage:\tpuer [options...]\n\nOptions:\n" + (parser.output()) + "  ";
        return console.log(man);
      });
      parser.run(args);
      console.log(option);
      if (!option.help) {
        return puer(option);
      }
    };
  })(this);

}).call(this);
